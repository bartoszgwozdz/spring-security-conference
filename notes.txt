<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-test</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
</dependency>


1) copy registration.jsp and create login.jsp
    add jstl taglib

    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
    change title
    change form
    <div>
        <h1>Login</h1>
    </div>

    <div> <c:if test="${not empty param.error}" >Invalid username and password.</c:if>
    </div>


    <form:form action="perform_login" method="post">
        <form:errors path="*" cssClass="errorblock" element="div" />
        <div><label> User Name : <input type="text" name="username"/> </label></div>
        <div><label> Password: <input type="password" name="password"/> </label></div>
        <input type="submit" class="btn btn-lg btn-primary" role="button" value="Login"/>
    </form:form>

2) create ConferenceSecurityConfig.java

@Configuration
@EnableWebSecurity
public class ConferenceSecurityConfig extends WebSecurityConfigurerAdapter {

3) add and explain

@Override
    protected void configure(final HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                //.antMatchers("/admin/**").hasRole("ADMIN")
                .antMatchers("/anonymous*").anonymous()
                .antMatchers("/login*").permitAll()
                .antMatchers("/assets/css/**", "assets/js/**", "/images/**").permitAll()
                .antMatchers("/index*").permitAll()
                .anyRequest().authenticated()
                .and()
                .formLogin()
                .loginPage("/login")
                .loginProcessingUrl("/perform_login")
                .defaultSuccessUrl("/", true);

    }

4) add and explain (two parts)

@Override
    protected void configure(final AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("bryan").password(passwordEncoder().encode("pass")).roles("USER");

    }

@Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

5) add controller

@Override
       public void addViewControllers(final ViewControllerRegistry registry) {
           registry.addViewController("/login");
       }

6) Run example!!!